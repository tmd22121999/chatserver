/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Administrator
 */
public class Jserver extends javax.swing.JFrame {

    /**
     * Creates new form Jserver
     */
        // Vector to store active clients 
    static Vector<ClientHandler> ar = new Vector<>(); 
      
    // counter for clients 
    static int i = 0; 
    public Jserver() {
        initComponents();
        chatText.setEditable(false);
                class Listen extends Thread {

            public Listen() {
                start();
            }

            @Override
            public void run() {
                try {
                    listenSocket();
                } catch (IOException ex) {
                    Logger.getLogger(Jserver.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        new Listen();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mess = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatText = new javax.swing.JTextArea();
        send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        chatText.setColumns(20);
        chatText.setRows(5);
        jScrollPane1.setViewportView(chatText);

        send.setText("Gửi");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mess, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mess)
                    .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        // TODO add your handling code here:
        String msg=mess.getText();
        chatText.setText(chatText.getText()+"server :" + msg+"\n");
         for (ClientHandler mc : Jserver.ar)  
                { 
                    // if the recipient is found, write on its 
                    // output stream
                    
                    if (mc.isloggedin==true)  
                    { 
                        
                        try {
                            mc.dos.writeUTF("server : "+msg);
                            //break; 
                        } catch (IOException ex) {
                            
                            Logger.getLogger(Jserver.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } 
                } 
         mess.setText("");
    }//GEN-LAST:event_sendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])  {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Jserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Jserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Jserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
         java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
                new Jserver().setVisible(true);
             }
         });
        // server is listening on port 1234 
       
    } 


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mess;
    private javax.swing.JButton send;
    // End of variables declaration//GEN-END:variables

public void listenSocket() throws IOException  {
 ServerSocket ss = new ServerSocket(1234); 
          
        Socket s; 
          
        // running infinite loop for getting 
        // client request 
        while (true)  
        { 
            // Chấp nhận kết nối
            s = ss.accept(); 
  
            System.out.println("Yêu cầu kết nối mới : " + s); 
            DataInputStream dis = new DataInputStream(s.getInputStream()); 
            DataOutputStream dos = new DataOutputStream(s.getOutputStream()); 
            System.out.println("tạo 1 client  handler để quản lý client này..."); 
              // tạo 1 client  handler để quản lý client
            ClientHandler mtch = new ClientHandler(s,"client " + i, dis, dos); 
            //Tạo một luồng mới cho client chạy song song
            Thread t = new Thread(mtch);  
            System.out.println("Thêm client này vào danh sách client đang tham gia"); 
            // Thêm client này vào danh sách client đang hoạt động
            ar.add(mtch); 
            //bắt đầu luồng
            t.start(); 
  
            // increment i for new client. 
            // i is used for naming only, and can be replaced 
            // by any naming scheme 
            i++; 
  
        } 
}
class ClientHandler implements Runnable  
{ 
    private String name; 
    final DataInputStream dis; 
    final DataOutputStream dos; 
    Socket s; 
    boolean isloggedin; 
      
    // constructor 
    public ClientHandler(Socket s, String name, 
                            DataInputStream dis, DataOutputStream dos) { 
        this.dis = dis; 
        this.dos = dos; 
        this.name = name; 
        this.s = s; 
        this.isloggedin=true; 
    } 
  
    @Override
    public void run() { 
  
        String received; 
        while (true)  
        { 
            try
            { 
                
                received = dis.readUTF(); // Nhận dữ liệu
                //System.out.println(received); 
                //Hiển thị tin nhắn lên màn hình
                 chatText.setText(chatText.getText()+this.name+" : "+received+"\n");
                //xóa client khi client đó thoát
                 if(received.equals("logout")){ 
                    this.isloggedin=false; 
                    this.s.close(); 
                    break; 
                } 
                String MsgToSend =received;
                //gửi tin nhắn đến các client đang hoạt động
                for (ClientHandler mc : Jserver.ar)  
                { 
                      if (mc.isloggedin==true)  
                    { 
                        mc.dos.writeUTF(this.name+" : "+MsgToSend); 
                        //break; 
                    }  
                } 
            } catch (IOException e) { 
                  
                e.printStackTrace(); 
            } 
              
        } 
        try
        { 
            // closing resources 
            this.dis.close(); 
            this.dos.close(); 
              
        }catch(IOException e){ 
            e.printStackTrace(); 
        } 
    } 
} 
}